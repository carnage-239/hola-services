service: profile

# Create an optimized package for our functions. Currently set as `false`
# because setting it as `true` causes memory leak issue on type checking.
package:
  individually: false

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb-local
  # - serverless-domain-manager

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # domains:
  #   prod: api.hola.com
  #   staging: staging-api.hola.com
  #   dev: dev-api.hola.com
  # customDomain:
  #   domainName: ${self:custom.domains.${self:custom.stage}}
  #   certificateName: '*.hola.com'
    # stage: ${self:custom.stage}
    # Set the basePath to whatever you would like it to, by default it will be
    # same as the `service` name.
    # basePath: ${self:service}
    # createRoute53Record: true
  tableName:
    users: ${self:custom.stage}-${self:service}-users
  dynamodb:
    stages:
      - dev
    start:
      port: 8888
      inMemory: true
      migrate: true
    migration:
      dir: offline
  serverless-offline:
    httpPort: 5000

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        # - 'Fn::GetAtt': [ProfileTable, Arn]
        # Below is the other way to describe DynamoDB table
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.users}'
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.users}/index/email-index'
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.users}/index/mobile-number-index'

  environment:
    TABLE_NAME_USERS: ${self:custom.tableName.users}

functions:
  createUser:
    handler: handler.createUser
    events:
      - http:
          path: /user
          method: post

  login:
    handler: handler.login
    events:
      - http:
          path: users/login
          method: post
          cors: true

  refreshTokens:
    handler: handler.refreshTokens
    events:
      - http:
          path: user/refresh-tokens
          method: post
          cors: true

  fetchUserInfoFromToken:
    handler: handler.fetchUserInfoFromToken
    events:
      - http:
          path: user/token-info
          method: get
          cors: true

resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/gateway.yml)}
