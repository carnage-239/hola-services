service: guides

package:
  individually: false

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-s3-local

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.indywise.com
    staging: staging-api.indywise.com
    dev: dev-api.indywise.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    certificateName: '*.indywise.com'
    stage: ${self:custom.stage}
    basePath: ${self:service}
    createRoute53Record: true
  tableName:
    guides: ${self:custom.stage}-${self:service}-guides
  bucketName:
    guides: ${self:custom.stage}-${self:service}-guides
  dynamodb:
    stages:
      - dev
    start:
      port: 8888
      inMemory: true
      migrate: true
    migration:
      dir: offline
  serverless-offline:
    httpPort: 6000
  s3:
    host: localhost
    port: 9999
    directory: ./s3-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [Guides, Arn]
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.guides}'
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.guides}/index/email-index'
        
  environment:
    TABLE_NAME_GUIDES: ${self:custom.tableName.guides}
    BUCKET_NAME_GUIDES: ${self:custom.bucketName.guides}
    STAGE: ${self:custom.stage}
    REGION: ${self:provider.region}

functions:

  guideCreate:
    handler: handler.guideCreate
    events:
      - http:
          path: /guide/{ID}
          method: post
          cors: true
  
  fetchGuide:
    handler: handler.fetchGuide
    events:
      - http:
          path: /guide/{ID}
          method: get
          cors: true

  guideVerification:
    handler: handler.guideVerification
    events:
      - http:
          path: /guide/verification/{ID}
          method: post
          cors: true

  licensePresignUpload:
    handler: handler.licensePresignUpload
    events:
      - http:
          path: /license/presign/{ID}
          method: post
          cors: true

  panPresignUpload:
    handler: handler.panPresignUpload
    events:
      - http:
          path: /pan/presign/{ID}
          method: post
          cors: true

  aadharFrontPresignUpload:
    handler: handler.aadharFrontPresignUpload
    events:
      - http:
          path: /aadhar-front/presign/{ID}
          method: post
          cors: true

  aadharBackPresignUpload:
    handler: handler.aadharBackPresignUpload
    events:
      - http:
          path: /aadhar-back/presign/{ID}
          method: post
          cors: true


resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket-guides.yml)}
  - ${file(resources/gateway.yml)}
