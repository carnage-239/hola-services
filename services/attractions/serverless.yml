service: attractions

package:
  individually: false

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb-local

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.indywise.com
    staging: staging-api.indywise.com
    dev: dev-api.indywise.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    certificateName: '*.indywise.com'
    stage: ${self:custom.stage}
    basePath: ${self:service}
    createRoute53Record: true
  tableName:
    attractions: ${self:custom.stage}-attractions-attractions
  dynamodb:
    stages:
      - dev
    start:
      port: 8888
      inMemory: true
      migrate: true
    migration:
      dir: offline
  serverless-offline:
    httpPort: 8000

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        # - 'Fn::GetAtt': [MyTable, Arn]
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.attractions}'
        # - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName.accounts}/index/email-index'

  environment:
    TABLE_NAME_ATTRACTIONS: ${self:custom.tableName.attractions}

functions:
  registerAttraction:
    handler: handler.registerAttraction
    events:
      - http:
          path: /attraction
          method: post

  getNearbyLocations:
    handler: handler.getNearbyLocations
    events:
      - http:
          path: /nearby-attractions
          method: post
  
  fetchAttractionsUsingAOP:
    handler: handler.fetchAttractionsUsingAOP
    events:
      - http:
          path: /attraction/aop
          method: post
          
resources:
  - ${file(resources/dynamodb-table.yml)}
